@startuml Restaurant Management System

' Style and theme
skinparam classAttributeIconSize 0
skinparam style strictuml
skinparam backgroundColor white
skinparam class {
    BackgroundColor white
    ArrowColor #2688d4
    BorderColor #2688d4
}

' Stereotypes
skinparam stereotypeCBackgroundColor white
skinparam stereotypeCBorderColor #2688d4

' Design Pattern Packages
package "Facade Pattern" as FacadePattern {
    class RestaurantFacade {
        -orderManager: OrderManager
        +placeOrder(int tableNumber, String orderItems): Order
        +trackOrder(String orderId): void
        +completeOrder(String orderId): void
        +setPricingStrategy(boolean isStudent): void
        +setStaffAvailability(String staffId, boolean active): void
        +displayPrices(double basePrice): void
    }
}

package "Observer Pattern" as ObserverPattern {
    interface OrderObserver {
        +update(String orderId, String status): void
        +getObserverId(): String
        +isActive(): boolean
    }

    class Order {
        -orderId: String
        -items: List<String>
        -status: String
        -observers: List<OrderObserver>
        +getOrderId(): String
        +getStatus(): String
        +getItems(): List<String>
        +setStatus(String status): void
        +registerObserver(OrderObserver observer): void
        +removeObserver(OrderObserver observer): void
        +notifyObservers(String status): void
    }

    class Waiter {
        -waiterId: String
        -name: String
        -active: boolean
        -preferredLanguage: Language
        -translator: TranslationService
        -pricingStrategy: PricingStrategy
        +getName(): String
        +getPreferredLanguage(): Language
        +getTranslator(): TranslationService
        +getPricingStrategy(): PricingStrategy
        +update(String orderId, String status): void
        +displayPrice(double basePrice): void
        +setPricingStrategy(PricingStrategy strategy): void
        +setActive(boolean active): void
    }

    class KitchenStaff {
        -staffId: String
        -name: String
        -active: boolean
        +update(String orderId, String status): void
        +setActive(boolean active): void
    }

    class CustomerInterface {
        -customerId: String
        +update(String orderId, String status): void
    }
}

package "Strategy Pattern" as StrategyPattern {
    interface PricingStrategy {
        +calculatePrice(double basePrice): double
        +getDescription(): String
    }

    class WeekdayPricingStrategy {
        -WEEKDAY_DISCOUNT: double
        +calculatePrice(double basePrice): double
        +getDescription(): String
    }

    class StudentPricingStrategy {
        -STUDENT_DISCOUNT: double
        +calculatePrice(double basePrice): double
        +getDescription(): String
    }
}

package "Factory Method Pattern" as FactoryPattern {
    abstract class MealFactory {
        +{abstract} createMeal(String type): Meal
    }

    class StarterFactory {
        -INSTANCE: StarterFactory
        -StarterFactory()
        +getInstance(): StarterFactory
        +createMeal(String type): Meal
    }

    class MainCourseFactory {
        +createMeal(String type): Meal
    }

    class DessertFactory {
        +createMeal(String type): Meal
    }
}

package "Adapter Pattern" as AdapterPattern {
    interface TranslationService {
        +translate(String text, Language targetLanguage): String
        +translateOrderStatus(String status, Language targetLanguage): String
        +formatPrice(double price, Language targetLanguage): String
    }

    class RestaurantTranslator {
        -statusTranslations: Map<String, Map<Language, String>>
        -localeMap: Map<Language, Locale>
        +translate(String text, Language targetLanguage): String
        +translateOrderStatus(String status, Language targetLanguage): String
        +formatPrice(double price, Language targetLanguage): String
    }
}

' Other Classes
interface Meal {
    +getName(): String
    +getPrice(): double
    +getDescription(): String
    +prepare(): void
}

class OrderManager {
    -starterFactory: StarterFactory
    -mainCourseFactory: MainCourseFactory
    -dessertFactory: DessertFactory
    -activeOrders: List<Order>
    -chef: KitchenStaff
    -waiters: List<Waiter>
    -translator: RestaurantTranslator
    -currentPricingStrategy: PricingStrategy
    -tableAssignments: Map<Integer, Waiter>
    -orderPrices: Map<String, Double>
    -orderItems: Map<String, List<String>>
    +placeOrder(int tableNumber, String orderItems): Order
    +completeOrder(String orderId): void
    +findOrder(String orderId): Order
    +setPricingStrategy(PricingStrategy strategy): void
    +setStaffActive(String staffId, boolean active): void
    +displayPrices(double basePrice): void
    -calculateBasePrice(String orderItems): double
    -displayOrderPrice(String orderId, double basePrice): void
}

enum Language {
    ENGLISH
    TURKISH
    JAPANESE
}

' Meal Classes
class Salad {
    -name: String
    -price: double
    -description: String
    +getName(): String
    +getPrice(): double
    +getDescription(): String
    +prepare(): void
}

class Soup {
    -name: String
    -price: double
    -description: String
    +getName(): String
    +getPrice(): double
    +getDescription(): String
    +prepare(): void
}

class Burger {
    -name: String
    -price: double
    -description: String
    +getName(): String
    +getPrice(): double
    +getDescription(): String
    +prepare(): void
}

class Steak {
    -name: String
    -price: double
    -description: String
    +getName(): String
    +getPrice(): double
    +getDescription(): String
    +prepare(): void
}

class IceCream {
    -name: String
    -price: double
    -description: String
    +getName(): String
    +getPrice(): double
    +getDescription(): String
    +prepare(): void
}

' Relationships
RestaurantFacade --> OrderManager : manages
OrderManager --> RestaurantTranslator : uses
OrderManager --> PricingStrategy : uses
OrderManager --> Order : manages
OrderManager --> KitchenStaff : manages
OrderManager --> Waiter : manages

Order --> OrderObserver : notifies
Waiter ..|> OrderObserver : implements
KitchenStaff ..|> OrderObserver : implements
CustomerInterface ..|> OrderObserver : implements

MealFactory <|-- StarterFactory : extends
MealFactory <|-- MainCourseFactory : extends
MealFactory <|-- DessertFactory : extends

StarterFactory ..> Salad : creates
StarterFactory ..> Soup : creates
MainCourseFactory ..> Burger : creates
MainCourseFactory ..> Steak : creates
DessertFactory ..> IceCream : creates

Salad ..|> Meal : implements
Soup ..|> Meal : implements
Burger ..|> Meal : implements
Steak ..|> Meal : implements
IceCream ..|> Meal : implements

PricingStrategy <|.. WeekdayPricingStrategy : implements
PricingStrategy <|.. StudentPricingStrategy : implements

TranslationService <|.. RestaurantTranslator : implements

@enduml